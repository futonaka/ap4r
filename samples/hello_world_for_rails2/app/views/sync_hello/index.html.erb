<style type="text/css">
body {
  line-height: 1.5em;
  padding-left: 1em;
}

h1, h2 {
  margin-left: -0.5em;
  background-color: #DDF;
  padding: 0.4em 1em 0.2em 15px;
}

h1 {
  font-size: x-large;
  border-top: 5px blue solid;
  border-left: 10px blue solid;
}

h2 {
  font-size: large;
  border-top: 2px blue solid;
  border-left: 5px blue solid;
  clear: both;
}

ul {
  line-height: 1.5em;
}

#ap4r_logo {
  margin-top: -0.7em;
  margin-right: 0.7em;
  width: 15em;
  float: right;
}
#dispatch_menu {
  list-style-type: none;
  display: inline;
}

#footer {
  padding-top: 2em;
}

.dispatch_item {
  display: block;
  width; 8em;
  float: left;
  margin: 0 1em;
}

.plain_text_contents {
  font-size: x-small;
  background-color: #FFFFAA;
  margin: 0.4em 0 0.4em 2em;
  padding: 0.2em 1em;
  width: 90%;
  border: 1px black solid;
  height: 20ex;
  overflow: scroll;
  line-height: 1.2em;
}

</style>

<%= image_tag "ap4r_logo.png", :id => "ap4r_logo"%>
<h1>Hello, AP4R World!</h1>
This is a sample application for AP4R, Asynchronous Processing for Ruby.
You can run rails actions not only synchronously but asynchronously!

<h2>Overview</h2>
In this "Hello World" application for AP4R,
<ul>
  <li>Using file at <%= monosp "RAIL_ROOT/public/HelloWorld.txt" %>, </li>
  <li>synchronous and asynchronous logics will write <%= monosp %Q("Hello") %> and
    <%= monosp %Q("World")%> respectively.</li>
  <li>Asynchronous logic invocation has four flavours:
    <ul>
      <li>First three of these are distinguished by protocols used in calling asynchronous logic,
        <%= monosp "HTTP" %>, <%= monosp "XML-RPC" %> and <%= monosp "SOAP" %>.</li>
      <li>Remaining one has more nice quality-of-service property, <em>once</em>,
        with SAF support (protocol is <%= monosp "HTTP" %>).</li>
    </ul>
  <li>To invoke initial syncronous logic, click any one button.</li>
    <ul>
      <li>At first, simple HTTP request/response is executed synchronously. You can confirm a text file
        written <%= monosp %Q("Hello") %>. </li>
      <li>10 seconds later, you will realize that <%= monosp %Q("World") %> is appended,
        not by Ajax but by messaging with AP4R! </li>
    </ul>
</ul>

<ul id="dispatch_menu">
<% [["via_http", "HTTP POST"], ["via_xmlrpc", "XML-RPC"], ["via_soap", "SOAP"],
    ["with_saf", "SAF (logical delete-mode)"],["with_block", "WITH_BLOCK"]].each do |(action, label)| %>
<li class="dispatch_item">
  <% form_remote_tag :url => {:action => "execute_#{action}"} do -%>
  <div><%= submit_tag label %></div>
  <% end -%>
</li>
<% end -%>
</ul>


<h2>File Contents</h2>
of <%= monosp "RAILS_ROOT/public/HelloWorld.txt" %>.
Updated by PeriodicalExecutor every 3 seconds (no relations to AP4R).
<div class="plain_text_contents">
  <pre id="file_content"></pre>
</div>
<% form_remote_tag :url => {:action => 'clear_file'} do -%>
  <div><%= submit_tag 'clear file contents' %>
    (this action might be blocked during asyncronous logic is processing.)</div>
<% end -%>
<%= periodically_call_remote :update => "file_content",
   :url => "/HelloWorld.txt",
   :method => 'get',
   :frequency => 3 %>


<h2>SAF Contents</h2>
of <%= monosp("stored_messages") %> table in the application database.<br />
<ul>
  <li>(<em>You need this step just once.</em>)
    At first, create a table for SAF, <%= monosp("stored_messages") %>.
    Click <%= link_to_remote "Here", :url => {:action => "create_saf"}, :method => :post %>
    to create table by <%= monosp "rake:migrate" %>.
  </li>
  <li>After creating a table for SAF function, you can run messaging with SAF. Push the "SAF" button above.</li>
  <li>You can confirm SAF contents with YAML format anytime.
</ul>

<% form_remote_tag :update => 'saf_content', :url => {:action => 'saf_content'} do -%>
  <div><%= submit_tag 'confirm SAF contents' %></div>
<% end -%>
<div class="plain_text_contents">
  <pre id="saf_content"></pre>
</div>
<% form_remote_tag :update => 'saf_content', :url => {:action => 'clear_saf'} do -%>
  <div><%= submit_tag 'clear SAF contents' %></div>
<% end -%>


<h2>References</h2>
<ul>
  <li>Project at Rubyforge
    <p><a href="http://rubyforge.org/projects/ap4r/">http://rubyforge.org/projects/ap4r/</a></p>
  </li>
  <li>developers' blogs (mostly in Japanese, english entries are tagged by "EN"), mailing lists
    <p>
      <a href="http://d.hatena.ne.jp/kiwamu/">kiwamu</a>
      and <a href="http://d.hatena.ne.jp/ita-wasa/">shino</a>
    </p>
    <p>
      <a href="http://rubyforge.org/mailman/listinfo/ap4r-user">ap4r-user@rubyforge</a>
    </p>
  </li>
  <li>Subversion Repository
    <p>
      <a href="http://viewvc.rubyforge.mmmultiworks.com/cgi/viewvc.cgi/trunk/ap4r/?root=ap4r">trunk of core library</a>
      , <a href="http://viewvc.rubyforge.mmmultiworks.com/cgi/viewvc.cgi/trunk/samples/HelloWorld/?root=ap4r">
        trunk of this application</a>
    </p>
  </li>
</ul>

<div id="footer">
Thank you for your interests!
</div>
